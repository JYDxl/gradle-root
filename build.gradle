/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

buildscript {
  ext {
    springboot_version = '2.1.2.RELEASE'
    kotlin_version = '1.3.21'
  }

  repositories {
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
  }

  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:$springboot_version")
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlin_version")
  }
}

allprojects {
  group = 'org.github'
  version = '0.0.1-SNAPSHOT'

  ext {
    kotlinx_coroutines_version = '1.1.1'
    mybatis_plus_version = '3.0.7.1'
    protobuf_version = '3.6.1'
    okhttp3_version = '3.12.1'
    netty_version = '4.1.33.Final'
    mysql_version = '5.1.47'
    guava_version = '27.0.1-jre'
  }
}

subprojects {
  apply plugin: 'kotlin'
  apply plugin: 'kotlin-spring'
  apply plugin: 'org.springframework.boot'
  apply plugin: 'io.spring.dependency-management'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  bootJar.enabled = false
  test.enabled = false
  jar.enabled = true

  compileKotlin {
    kotlinOptions {
      freeCompilerArgs = ['-Xjsr305=strict']
      jvmTarget = '1.8'
    }
  }

  compileTestKotlin {
    kotlinOptions {
      freeCompilerArgs = ['-Xjsr305=strict']
      jvmTarget = '1.8'
    }
  }

  repositories {
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
  }

  dependencies {
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
    compile('org.jetbrains.kotlin:kotlin-reflect')

    compile("com.squareup.okhttp3:okhttp:$okhttp3_version")
    compile("com.google.guava:guava:$guava_version")
    compile("io.netty:netty-all:$netty_version")
    compile("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinx_coroutines_version")

    annotationProcessor('org.projectlombok:lombok')
    compileOnly('org.projectlombok:lombok')
    testCompileOnly('org.projectlombok:lombok')
    testAnnotationProcessor('org.projectlombok:lombok')
  }
}
